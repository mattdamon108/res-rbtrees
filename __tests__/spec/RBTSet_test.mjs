// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "@dusty-phillips/rescript-zora/src/Zora.mjs";
import * as Zora$1 from "zora";
import * as Curry from "@rescript/std/lib/es6/curry.js";
import * as RBTSet from "../../src/RBTSet.mjs";
import * as Caml_obj from "@rescript/std/lib/es6/caml_obj.js";

function testEqual(t, name, lhs, rhs) {
  t.test(name, (function (t) {
          t.equal(lhs, rhs, name);
          return Zora.done(undefined);
        }));
  
}

var compare = Caml_obj.caml_compare;

var Key = {
  compare: compare
};

var $$Set = RBTSet.Make(Key);

var empty = $$Set.empty;

var m1 = Curry._2($$Set.add, 1, empty);

Zora$1.test("-- isEmpty --", (function (t) {
        testEqual(t, "* empty", Curry._1($$Set.isEmpty, empty), true);
        return testEqual(t, "* not empty", Curry._1($$Set.isEmpty, m1), false);
      }));

Zora$1.test("-- add & mem --", (function (t) {
        var m2 = Curry._2($$Set.add, 2, m1);
        var m3 = Curry._2($$Set.add, 3, m2);
        return testEqual(t, "* mem 2", Curry._2($$Set.mem, 2, m3), true);
      }));

export {
  testEqual ,
  Key ,
  $$Set ,
  empty ,
  m1 ,
  
}
/* Set Not a pure module */
