// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "@rescript/std/lib/es6/curry.js";

function Make(funarg) {
  var $$enum = function (_m, _e) {
    while(true) {
      var e = _e;
      var m = _m;
      if (typeof m === "number") {
        return e;
      }
      _e = /* More */{
        _0: m._1,
        _1: m._2,
        _2: m._3,
        _3: e
      };
      _m = m._0;
      continue ;
    };
  };
  var blackify = function (n) {
    if (typeof n === "number" || n.TAG === /* Black */0) {
      return [
              n,
              true
            ];
    } else {
      return [
              {
                TAG: /* Black */0,
                _0: n._0,
                _1: n._1,
                _2: n._2,
                _3: n._3
              },
              false
            ];
    }
  };
  var isEmpty = function (m) {
    if (typeof m === "number") {
      return true;
    } else {
      return false;
    }
  };
  var balanceLeft = function (l, kx, x, r) {
    var exit = 0;
    var a;
    var kx$1;
    var x$1;
    var b;
    var ky;
    var y;
    var c;
    var kz;
    var z;
    var d;
    if (typeof l === "number" || l.TAG === /* Black */0) {
      exit = 1;
    } else {
      var a$1 = l._0;
      var exit$1 = 0;
      if (typeof a$1 === "number" || a$1.TAG === /* Black */0) {
        exit$1 = 3;
      } else {
        a = a$1._0;
        kx$1 = a$1._1;
        x$1 = a$1._2;
        b = a$1._3;
        ky = l._1;
        y = l._2;
        c = l._3;
        kz = kx;
        z = x;
        d = r;
        exit = 2;
      }
      if (exit$1 === 3) {
        var match = l._3;
        if (typeof match === "number" || match.TAG === /* Black */0) {
          exit = 1;
        } else {
          a = a$1;
          kx$1 = l._1;
          x$1 = l._2;
          b = match._0;
          ky = match._1;
          y = match._2;
          c = match._3;
          kz = kx;
          z = x;
          d = r;
          exit = 2;
        }
      }
      
    }
    switch (exit) {
      case 1 :
          return {
                  TAG: /* Black */0,
                  _0: l,
                  _1: kx,
                  _2: x,
                  _3: r
                };
      case 2 :
          return {
                  TAG: /* Red */1,
                  _0: {
                    TAG: /* Black */0,
                    _0: a,
                    _1: kx$1,
                    _2: x$1,
                    _3: b
                  },
                  _1: ky,
                  _2: y,
                  _3: {
                    TAG: /* Black */0,
                    _0: c,
                    _1: kz,
                    _2: z,
                    _3: d
                  }
                };
      
    }
  };
  var balanceRight = function (l, kx, x, r) {
    var exit = 0;
    var a;
    var kx$1;
    var x$1;
    var b;
    var ky;
    var y;
    var c;
    var kz;
    var z;
    var d;
    if (typeof r === "number" || r.TAG === /* Black */0) {
      exit = 1;
    } else {
      var b$1 = r._0;
      var exit$1 = 0;
      if (typeof b$1 === "number" || b$1.TAG === /* Black */0) {
        exit$1 = 3;
      } else {
        a = l;
        kx$1 = kx;
        x$1 = x;
        b = b$1._0;
        ky = b$1._1;
        y = b$1._2;
        c = b$1._3;
        kz = r._1;
        z = r._2;
        d = r._3;
        exit = 2;
      }
      if (exit$1 === 3) {
        var match = r._3;
        if (typeof match === "number" || match.TAG === /* Black */0) {
          exit = 1;
        } else {
          a = l;
          kx$1 = kx;
          x$1 = x;
          b = b$1;
          ky = r._1;
          y = r._2;
          c = match._0;
          kz = match._1;
          z = match._2;
          d = match._3;
          exit = 2;
        }
      }
      
    }
    switch (exit) {
      case 1 :
          return {
                  TAG: /* Black */0,
                  _0: l,
                  _1: kx,
                  _2: x,
                  _3: r
                };
      case 2 :
          return {
                  TAG: /* Red */1,
                  _0: {
                    TAG: /* Black */0,
                    _0: a,
                    _1: kx$1,
                    _2: x$1,
                    _3: b
                  },
                  _1: ky,
                  _2: y,
                  _3: {
                    TAG: /* Black */0,
                    _0: c,
                    _1: kz,
                    _2: z,
                    _3: d
                  }
                };
      
    }
  };
  var add = function (kx, x, m) {
    var add_aux = function (m) {
      if (typeof m === "number") {
        return {
                TAG: /* Red */1,
                _0: /* Empty */0,
                _1: kx,
                _2: x,
                _3: /* Empty */0
              };
      }
      if (m.TAG === /* Black */0) {
        var r = m._3;
        var y = m._2;
        var ky = m._1;
        var l = m._0;
        var c = Curry._2(funarg.compare, kx, ky);
        if (c < 0) {
          return balanceLeft(add_aux(l), ky, y, r);
        } else if (c > 0) {
          return balanceRight(l, ky, y, add_aux(r));
        } else {
          return {
                  TAG: /* Black */0,
                  _0: l,
                  _1: kx,
                  _2: x,
                  _3: r
                };
        }
      }
      var r$1 = m._3;
      var y$1 = m._2;
      var ky$1 = m._1;
      var l$1 = m._0;
      var c$1 = Curry._2(funarg.compare, kx, ky$1);
      if (c$1 < 0) {
        return {
                TAG: /* Red */1,
                _0: add_aux(l$1),
                _1: ky$1,
                _2: y$1,
                _3: r$1
              };
      } else if (c$1 > 0) {
        return {
                TAG: /* Red */1,
                _0: l$1,
                _1: ky$1,
                _2: y$1,
                _3: add_aux(r$1)
              };
      } else {
        return {
                TAG: /* Red */1,
                _0: l$1,
                _1: kx,
                _2: x,
                _3: r$1
              };
      }
    };
    return blackify(add_aux(m))[0];
  };
  var find = function (k, _n) {
    while(true) {
      var n = _n;
      if (typeof n === "number") {
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }
      var c = Curry._2(funarg.compare, k, n._1);
      if (c < 0) {
        _n = n._0;
        continue ;
      }
      if (c <= 0) {
        return n._2;
      }
      _n = n._3;
      continue ;
    };
  };
  var unbalancedLeft = function (n) {
    if (typeof n !== "number") {
      if (n.TAG === /* Black */0) {
        var match = n._0;
        if (typeof match !== "number") {
          if (match.TAG === /* Black */0) {
            return [
                    balanceLeft({
                          TAG: /* Red */1,
                          _0: match._0,
                          _1: match._1,
                          _2: match._2,
                          _3: match._3
                        }, n._1, n._2, n._3),
                    true
                  ];
          }
          var match$1 = match._3;
          if (typeof match$1 !== "number" && match$1.TAG === /* Black */0) {
            return [
                    {
                      TAG: /* Black */0,
                      _0: match._0,
                      _1: match._1,
                      _2: match._2,
                      _3: balanceLeft({
                            TAG: /* Red */1,
                            _0: match$1._0,
                            _1: match$1._1,
                            _2: match$1._2,
                            _3: match$1._3
                          }, n._1, n._2, n._3)
                    },
                    false
                  ];
          }
          
        }
        
      } else {
        var match$2 = n._0;
        if (typeof match$2 !== "number" && match$2.TAG === /* Black */0) {
          return [
                  balanceLeft({
                        TAG: /* Red */1,
                        _0: match$2._0,
                        _1: match$2._1,
                        _2: match$2._2,
                        _3: match$2._3
                      }, n._1, n._2, n._3),
                  false
                ];
        }
        
      }
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "RBTMap.res",
            118,
            11
          ],
          Error: new Error()
        };
  };
  var unbalancedRight = function (n) {
    if (typeof n !== "number") {
      if (n.TAG === /* Black */0) {
        var match = n._3;
        var x = n._2;
        var kx = n._1;
        var a = n._0;
        if (typeof match !== "number") {
          if (match.TAG === /* Black */0) {
            return [
                    balanceRight(a, kx, x, {
                          TAG: /* Red */1,
                          _0: match._0,
                          _1: match._1,
                          _2: match._2,
                          _3: match._3
                        }),
                    true
                  ];
          }
          var match$1 = match._0;
          if (typeof match$1 !== "number" && match$1.TAG === /* Black */0) {
            return [
                    {
                      TAG: /* Black */0,
                      _0: balanceRight(a, kx, x, {
                            TAG: /* Red */1,
                            _0: match$1._0,
                            _1: match$1._1,
                            _2: match$1._2,
                            _3: match$1._3
                          }),
                      _1: match._1,
                      _2: match._2,
                      _3: match._3
                    },
                    false
                  ];
          }
          
        }
        
      } else {
        var match$2 = n._3;
        if (typeof match$2 !== "number" && match$2.TAG === /* Black */0) {
          return [
                  balanceRight(n._0, n._1, n._2, {
                        TAG: /* Red */1,
                        _0: match$2._0,
                        _1: match$2._1,
                        _2: match$2._2,
                        _3: match$2._3
                      }),
                  false
                ];
        }
        
      }
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "RBTMap.res",
            129,
            11
          ],
          Error: new Error()
        };
  };
  var removeMin = function (n) {
    if (typeof n === "number") {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "RBTMap.res",
              136,
              6
            ],
            Error: new Error()
          };
    }
    if (n.TAG === /* Black */0) {
      var l = n._0;
      if (typeof l === "number") {
        var match = n._3;
        var x = n._2;
        var kx = n._1;
        if (typeof match === "number") {
          return [
                  /* Empty */0,
                  kx,
                  x,
                  true
                ];
        }
        if (match.TAG !== /* Black */0) {
          return [
                  {
                    TAG: /* Black */0,
                    _0: match._0,
                    _1: match._1,
                    _2: match._2,
                    _3: match._3
                  },
                  kx,
                  x,
                  false
                ];
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "RBTMap.res",
                136,
                6
              ],
              Error: new Error()
            };
      } else {
        var match$1 = removeMin(l);
        var y = match$1[2];
        var ky = match$1[1];
        var m_0 = match$1[0];
        var m_1 = n._1;
        var m_2 = n._2;
        var m_3 = n._3;
        var m = {
          TAG: /* Black */0,
          _0: m_0,
          _1: m_1,
          _2: m_2,
          _3: m_3
        };
        if (!match$1[3]) {
          return [
                  m,
                  ky,
                  y,
                  false
                ];
        }
        var match$2 = unbalancedRight(m);
        return [
                match$2[0],
                ky,
                y,
                match$2[1]
              ];
      }
    } else {
      var l$1 = n._0;
      if (typeof l$1 === "number") {
        return [
                n._3,
                n._1,
                n._2,
                false
              ];
      }
      var match$3 = removeMin(l$1);
      var y$1 = match$3[2];
      var ky$1 = match$3[1];
      var m_0$1 = match$3[0];
      var m_1$1 = n._1;
      var m_2$1 = n._2;
      var m_3$1 = n._3;
      var m$1 = {
        TAG: /* Red */1,
        _0: m_0$1,
        _1: m_1$1,
        _2: m_2$1,
        _3: m_3$1
      };
      if (!match$3[3]) {
        return [
                m$1,
                ky$1,
                y$1,
                false
              ];
      }
      var match$4 = unbalancedRight(m$1);
      return [
              match$4[0],
              ky$1,
              y$1,
              match$4[1]
            ];
    }
  };
  var remove = function (k, m) {
    var removeAux = function (n) {
      if (typeof n === "number") {
        return [
                /* Empty */0,
                false
              ];
      }
      if (n.TAG === /* Black */0) {
        var r = n._3;
        var x = n._2;
        var kx = n._1;
        var l = n._0;
        var c = Curry._2(funarg.compare, k, kx);
        if (c < 0) {
          var match = removeAux(l);
          var m_0 = match[0];
          var m = {
            TAG: /* Black */0,
            _0: m_0,
            _1: kx,
            _2: x,
            _3: r
          };
          if (match[1]) {
            return unbalancedRight(m);
          } else {
            return [
                    m,
                    false
                  ];
          }
        }
        if (c < 0) {
          var match$1 = removeAux(r);
          var m_3 = match$1[0];
          var m$1 = {
            TAG: /* Black */0,
            _0: l,
            _1: kx,
            _2: x,
            _3: m_3
          };
          if (match$1[1]) {
            return unbalancedLeft(m$1);
          } else {
            return [
                    m$1,
                    false
                  ];
          }
        }
        if (typeof r === "number") {
          return blackify(l);
        }
        var match$2 = removeMin(r);
        var m_1 = match$2[1];
        var m_2 = match$2[2];
        var m_3$1 = match$2[0];
        var m$2 = {
          TAG: /* Black */0,
          _0: l,
          _1: m_1,
          _2: m_2,
          _3: m_3$1
        };
        if (match$2[3]) {
          return unbalancedLeft(m$2);
        } else {
          return [
                  m$2,
                  false
                ];
        }
      }
      var r$1 = n._3;
      var x$1 = n._2;
      var kx$1 = n._1;
      var l$1 = n._0;
      var c$1 = Curry._2(funarg.compare, k, kx$1);
      if (c$1 < 0) {
        var match$3 = removeAux(l$1);
        var m_0$1 = match$3[0];
        var m$3 = {
          TAG: /* Red */1,
          _0: m_0$1,
          _1: kx$1,
          _2: x$1,
          _3: r$1
        };
        if (match$3[1]) {
          return unbalancedRight(m$3);
        } else {
          return [
                  m$3,
                  false
                ];
        }
      }
      if (c$1 > 0) {
        var match$4 = removeAux(r$1);
        var m_3$2 = match$4[0];
        var m$4 = {
          TAG: /* Red */1,
          _0: l$1,
          _1: kx$1,
          _2: x$1,
          _3: m_3$2
        };
        if (match$4[1]) {
          return unbalancedLeft(m$4);
        } else {
          return [
                  m$4,
                  false
                ];
        }
      }
      if (typeof r$1 === "number") {
        return [
                l$1,
                false
              ];
      }
      var match$5 = removeMin(r$1);
      var m_1$1 = match$5[1];
      var m_2$1 = match$5[2];
      var m_3$3 = match$5[0];
      var m$5 = {
        TAG: /* Red */1,
        _0: l$1,
        _1: m_1$1,
        _2: m_2$1,
        _3: m_3$3
      };
      if (match$5[3]) {
        return unbalancedLeft(m$5);
      } else {
        return [
                m$5,
                false
              ];
      }
    };
    return removeAux(m)[0];
  };
  var mem = function (k, _n) {
    while(true) {
      var n = _n;
      if (typeof n === "number") {
        return false;
      }
      var c = Curry._2(funarg.compare, k, n._1);
      if (c < 0) {
        _n = n._0;
        continue ;
      }
      if (c <= 0) {
        return true;
      }
      _n = n._3;
      continue ;
    };
  };
  var iter = function (f, _n) {
    while(true) {
      var n = _n;
      if (typeof n === "number") {
        return ;
      }
      iter(f, n._0);
      Curry._2(f, n._1, n._2);
      _n = n._3;
      continue ;
    };
  };
  var map = function (f, n) {
    if (typeof n === "number") {
      return /* Empty */0;
    } else if (n.TAG === /* Black */0) {
      return {
              TAG: /* Black */0,
              _0: map(f, n._0),
              _1: n._1,
              _2: Curry._1(f, n._2),
              _3: map(f, n._3)
            };
    } else {
      return {
              TAG: /* Red */1,
              _0: map(f, n._0),
              _1: n._1,
              _2: Curry._1(f, n._2),
              _3: map(f, n._3)
            };
    }
  };
  var mapi = function (f, n) {
    if (typeof n === "number") {
      return /* Empty */0;
    }
    if (n.TAG === /* Black */0) {
      var k = n._1;
      return {
              TAG: /* Black */0,
              _0: mapi(f, n._0),
              _1: k,
              _2: Curry._2(f, k, n._2),
              _3: mapi(f, n._3)
            };
    }
    var k$1 = n._1;
    return {
            TAG: /* Red */1,
            _0: mapi(f, n._0),
            _1: k$1,
            _2: Curry._2(f, k$1, n._2),
            _3: mapi(f, n._3)
          };
  };
  var fold = function (f, _m, _accu) {
    while(true) {
      var accu = _accu;
      var m = _m;
      if (typeof m === "number") {
        return accu;
      }
      _accu = Curry._3(f, m._1, m._2, fold(f, m._0, accu));
      _m = m._3;
      continue ;
    };
  };
  var compare = function (cmp, m1, m2) {
    var _e1 = $$enum(m1, /* End */0);
    var _e2 = $$enum(m2, /* End */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        if (e2) {
          return -1;
        } else {
          return 0;
        }
      }
      if (!e2) {
        return 1;
      }
      var c = Curry._2(funarg.compare, e1._0, e2._0);
      if (c !== 0) {
        return c;
      }
      var c$1 = Curry._2(cmp, e1._1, e2._1);
      if (c$1 !== 0) {
        return c$1;
      }
      _e2 = $$enum(e2._2, e2._3);
      _e1 = $$enum(e1._2, e1._3);
      continue ;
    };
  };
  var equal = function (cmp, m1, m2) {
    var _e1 = $$enum(m1, /* End */0);
    var _e2 = $$enum(m2, /* End */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        if (e2) {
          return false;
        } else {
          return true;
        }
      }
      if (!e2) {
        return false;
      }
      if (!(Curry._2(funarg.compare, e1._0, e2._0) === 0 && Curry._2(cmp, e1._1, e2._1))) {
        return false;
      }
      _e2 = $$enum(e2._2, e2._3);
      _e1 = $$enum(e1._2, e1._3);
      continue ;
    };
  };
  return {
          empty: /* Empty */0,
          isEmpty: isEmpty,
          add: add,
          find: find,
          remove: remove,
          mem: mem,
          iter: iter,
          map: map,
          mapi: mapi,
          fold: fold,
          compare: compare,
          equal: equal
        };
}

export {
  Make ,
  
}
/* No side effect */
