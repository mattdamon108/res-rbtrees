// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "@rescript/std/lib/es6/curry.js";

function Make(funarg) {
  var $$enum = function (_s, _e) {
    while(true) {
      var e = _e;
      var s = _s;
      if (typeof s === "number") {
        return e;
      }
      _e = /* More */{
        _0: s._1,
        _1: s._2,
        _2: e
      };
      _s = s._0;
      continue ;
    };
  };
  var blackify = function (n) {
    if (typeof n === "number" || n.TAG === /* Black */0) {
      return [
              n,
              true
            ];
    } else {
      return [
              {
                TAG: /* Black */0,
                _0: n._0,
                _1: n._1,
                _2: n._2
              },
              false
            ];
    }
  };
  var isEmpty = function (s) {
    if (typeof s === "number") {
      return true;
    } else {
      return false;
    }
  };
  var balanceLeft = function (l, x, r) {
    var a;
    var x$1;
    var b;
    var y;
    var c;
    var z;
    var d;
    if (typeof l === "number") {
      return {
              TAG: /* Black */0,
              _0: l,
              _1: x,
              _2: r
            };
    }
    if (l.TAG === /* Black */0) {
      return {
              TAG: /* Black */0,
              _0: l,
              _1: x,
              _2: r
            };
    }
    var a$1 = l._0;
    var exit = 0;
    if (typeof a$1 === "number" || a$1.TAG === /* Black */0) {
      exit = 2;
    } else {
      a = a$1._0;
      x$1 = a$1._1;
      b = a$1._2;
      y = l._1;
      c = l._2;
      z = x;
      d = r;
    }
    if (exit === 2) {
      var match = l._2;
      if (typeof match === "number") {
        return {
                TAG: /* Black */0,
                _0: l,
                _1: x,
                _2: r
              };
      }
      if (match.TAG === /* Black */0) {
        return {
                TAG: /* Black */0,
                _0: l,
                _1: x,
                _2: r
              };
      }
      a = a$1;
      x$1 = l._1;
      b = match._0;
      y = match._1;
      c = match._2;
      z = x;
      d = r;
    }
    return {
            TAG: /* Red */1,
            _0: {
              TAG: /* Black */0,
              _0: a,
              _1: x$1,
              _2: b
            },
            _1: y,
            _2: {
              TAG: /* Black */0,
              _0: c,
              _1: z,
              _2: d
            }
          };
  };
  var balanceRight = function (l, x, r) {
    var a;
    var x$1;
    var b;
    var y;
    var c;
    var z;
    var d;
    if (typeof r === "number") {
      return {
              TAG: /* Black */0,
              _0: l,
              _1: x,
              _2: r
            };
    }
    if (r.TAG === /* Black */0) {
      return {
              TAG: /* Black */0,
              _0: l,
              _1: x,
              _2: r
            };
    }
    var b$1 = r._0;
    var exit = 0;
    if (typeof b$1 === "number" || b$1.TAG === /* Black */0) {
      exit = 2;
    } else {
      a = l;
      x$1 = x;
      b = b$1._0;
      y = b$1._1;
      c = b$1._2;
      z = r._1;
      d = r._2;
    }
    if (exit === 2) {
      var match = r._2;
      if (typeof match === "number") {
        return {
                TAG: /* Black */0,
                _0: l,
                _1: x,
                _2: r
              };
      }
      if (match.TAG === /* Black */0) {
        return {
                TAG: /* Black */0,
                _0: l,
                _1: x,
                _2: r
              };
      }
      a = l;
      x$1 = x;
      b = b$1;
      y = r._1;
      c = match._0;
      z = match._1;
      d = match._2;
    }
    return {
            TAG: /* Red */1,
            _0: {
              TAG: /* Black */0,
              _0: a,
              _1: x$1,
              _2: b
            },
            _1: y,
            _2: {
              TAG: /* Black */0,
              _0: c,
              _1: z,
              _2: d
            }
          };
  };
  var add = function (s, x) {
    var addAux = function (s) {
      if (typeof s === "number") {
        return {
                TAG: /* Red */1,
                _0: /* Empty */0,
                _1: x,
                _2: /* Empty */0
              };
      }
      if (s.TAG === /* Black */0) {
        var r = s._2;
        var y = s._1;
        var l = s._0;
        var c = Curry._2(funarg.compare, x, y);
        if (c < 0) {
          return balanceLeft(addAux(l), y, r);
        } else if (c > 0) {
          return balanceRight(l, y, addAux(r));
        } else {
          return s;
        }
      }
      var r$1 = s._2;
      var y$1 = s._1;
      var l$1 = s._0;
      var c$1 = Curry._2(funarg.compare, x, y$1);
      if (c$1 < 0) {
        return {
                TAG: /* Red */1,
                _0: addAux(l$1),
                _1: y$1,
                _2: r$1
              };
      } else if (c$1 > 0) {
        return {
                TAG: /* Red */1,
                _0: l$1,
                _1: y$1,
                _2: addAux(r$1)
              };
      } else {
        return s;
      }
    };
    return blackify(addAux(s))[0];
  };
  var mem = function (_s, x) {
    while(true) {
      var s = _s;
      if (typeof s === "number") {
        return false;
      }
      var c = Curry._2(funarg.compare, x, s._1);
      if (c < 0) {
        _s = s._0;
        continue ;
      }
      if (c <= 0) {
        return true;
      }
      _s = s._2;
      continue ;
    };
  };
  var singleton = function (x) {
    return {
            TAG: /* Black */0,
            _0: /* Empty */0,
            _1: x,
            _2: /* Empty */0
          };
  };
  var unbalancedLeft = function (s) {
    if (typeof s !== "number") {
      if (s.TAG === /* Black */0) {
        var match = s._0;
        if (typeof match !== "number") {
          if (match.TAG === /* Black */0) {
            return [
                    balanceLeft({
                          TAG: /* Red */1,
                          _0: match._0,
                          _1: match._1,
                          _2: match._2
                        }, s._1, s._2),
                    true
                  ];
          }
          var match$1 = match._2;
          if (typeof match$1 !== "number" && match$1.TAG === /* Black */0) {
            return [
                    {
                      TAG: /* Black */0,
                      _0: match._0,
                      _1: match._1,
                      _2: balanceLeft({
                            TAG: /* Red */1,
                            _0: match$1._0,
                            _1: match$1._1,
                            _2: match$1._2
                          }, s._1, s._2)
                    },
                    false
                  ];
          }
          
        }
        
      } else {
        var match$2 = s._0;
        if (typeof match$2 !== "number" && match$2.TAG === /* Black */0) {
          return [
                  balanceLeft({
                        TAG: /* Red */1,
                        _0: match$2._0,
                        _1: match$2._1,
                        _2: match$2._2
                      }, s._1, s._2),
                  false
                ];
        }
        
      }
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "RBTSet.res",
            132,
            11
          ],
          Error: new Error()
        };
  };
  var unbalancedRight = function (s) {
    if (typeof s !== "number") {
      if (s.TAG === /* Black */0) {
        var match = s._2;
        var x = s._1;
        var a = s._0;
        if (typeof match !== "number") {
          if (match.TAG === /* Black */0) {
            return [
                    balanceRight(a, x, {
                          TAG: /* Red */1,
                          _0: match._0,
                          _1: match._1,
                          _2: match._2
                        }),
                    true
                  ];
          }
          var match$1 = match._0;
          if (typeof match$1 !== "number" && match$1.TAG === /* Black */0) {
            return [
                    {
                      TAG: /* Black */0,
                      _0: balanceRight(a, x, {
                            TAG: /* Red */1,
                            _0: match$1._0,
                            _1: match$1._1,
                            _2: match$1._2
                          }),
                      _1: match._1,
                      _2: match._2
                    },
                    false
                  ];
          }
          
        }
        
      } else {
        var match$2 = s._2;
        if (typeof match$2 !== "number" && match$2.TAG === /* Black */0) {
          return [
                  balanceRight(s._0, s._1, {
                        TAG: /* Red */1,
                        _0: match$2._0,
                        _1: match$2._1,
                        _2: match$2._2
                      }),
                  false
                ];
        }
        
      }
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "RBTSet.res",
            143,
            11
          ],
          Error: new Error()
        };
  };
  var removeMin = function (s) {
    if (typeof s === "number") {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "RBTSet.res",
              150,
              6
            ],
            Error: new Error()
          };
    }
    if (s.TAG === /* Black */0) {
      var l = s._0;
      if (typeof l === "number") {
        var match = s._2;
        var x = s._1;
        if (typeof match === "number") {
          return [
                  /* Empty */0,
                  x,
                  true
                ];
        }
        if (match.TAG !== /* Black */0) {
          return [
                  {
                    TAG: /* Black */0,
                    _0: match._0,
                    _1: match._1,
                    _2: match._2
                  },
                  x,
                  false
                ];
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "RBTSet.res",
                150,
                6
              ],
              Error: new Error()
            };
      } else {
        var match$1 = removeMin(l);
        var y = match$1[1];
        var s_0 = match$1[0];
        var s_1 = s._1;
        var s_2 = s._2;
        var s$1 = {
          TAG: /* Black */0,
          _0: s_0,
          _1: s_1,
          _2: s_2
        };
        if (!match$1[2]) {
          return [
                  s$1,
                  y,
                  false
                ];
        }
        var match$2 = unbalancedRight(s$1);
        return [
                match$2[0],
                y,
                match$2[1]
              ];
      }
    } else {
      var l$1 = s._0;
      if (typeof l$1 === "number") {
        return [
                s._2,
                s._1,
                false
              ];
      }
      var match$3 = removeMin(l$1);
      var y$1 = match$3[1];
      var s_0$1 = match$3[0];
      var s_1$1 = s._1;
      var s_2$1 = s._2;
      var s$2 = {
        TAG: /* Red */1,
        _0: s_0$1,
        _1: s_1$1,
        _2: s_2$1
      };
      if (!match$3[2]) {
        return [
                s$2,
                y$1,
                false
              ];
      }
      var match$4 = unbalancedRight(s$2);
      return [
              match$4[0],
              y$1,
              match$4[1]
            ];
    }
  };
  var remove = function (s, x) {
    var removeAux = function (s) {
      if (typeof s === "number") {
        return [
                /* Empty */0,
                false
              ];
      }
      if (s.TAG === /* Black */0) {
        var r = s._2;
        var y = s._1;
        var l = s._0;
        var c = Curry._2(funarg.compare, x, y);
        if (c < 0) {
          var match = removeAux(l);
          var s_0 = match[0];
          var s$1 = {
            TAG: /* Black */0,
            _0: s_0,
            _1: y,
            _2: r
          };
          if (match[1]) {
            return unbalancedRight(s$1);
          } else {
            return [
                    s$1,
                    false
                  ];
          }
        }
        if (c > 0) {
          var match$1 = removeAux(r);
          var s_2 = match$1[0];
          var s$2 = {
            TAG: /* Black */0,
            _0: l,
            _1: y,
            _2: s_2
          };
          if (match$1[1]) {
            return unbalancedLeft(s$2);
          } else {
            return [
                    s$2,
                    false
                  ];
          }
        }
        if (typeof r === "number") {
          return blackify(l);
        }
        var match$2 = removeMin(r);
        var s_1 = match$2[1];
        var s_2$1 = match$2[0];
        var s$3 = {
          TAG: /* Black */0,
          _0: l,
          _1: s_1,
          _2: s_2$1
        };
        if (match$2[2]) {
          return unbalancedLeft(s$3);
        } else {
          return [
                  s$3,
                  false
                ];
        }
      }
      var r$1 = s._2;
      var y$1 = s._1;
      var l$1 = s._0;
      var c$1 = Curry._2(funarg.compare, x, y$1);
      if (c$1 < 0) {
        var match$3 = removeAux(l$1);
        var s_0$1 = match$3[0];
        var s$4 = {
          TAG: /* Red */1,
          _0: s_0$1,
          _1: y$1,
          _2: r$1
        };
        if (match$3[1]) {
          return unbalancedRight(s$4);
        } else {
          return [
                  s$4,
                  false
                ];
        }
      }
      if (c$1 > 0) {
        var match$4 = removeAux(r$1);
        var s_2$2 = match$4[0];
        var s$5 = {
          TAG: /* Red */1,
          _0: l$1,
          _1: y$1,
          _2: s_2$2
        };
        if (match$4[1]) {
          return unbalancedLeft(s$5);
        } else {
          return [
                  s$5,
                  false
                ];
        }
      }
      if (typeof r$1 === "number") {
        return [
                l$1,
                false
              ];
      }
      var match$5 = removeMin(r$1);
      var s_1$1 = match$5[1];
      var s_2$3 = match$5[0];
      var s$6 = {
        TAG: /* Red */1,
        _0: l$1,
        _1: s_1$1,
        _2: s_2$3
      };
      if (match$5[2]) {
        return unbalancedLeft(s$6);
      } else {
        return [
                s$6,
                false
              ];
      }
    };
    return removeAux(s)[0];
  };
  var union = function (s1, s2) {
    var _e1 = $$enum(s1, /* End */0);
    var _e2 = $$enum(s2, /* End */0);
    var _accu = /* Empty */0;
    while(true) {
      var accu = _accu;
      var e2 = _e2;
      var e1 = _e1;
      var x;
      var r;
      var e;
      if (e1) {
        var e1$1 = e1._2;
        var r1 = e1._1;
        var x1 = e1._0;
        if (e2) {
          var e2$1 = e2._2;
          var r2 = e2._1;
          var x2 = e2._0;
          var c = Curry._2(funarg.compare, x1, x2);
          if (c < 0) {
            _accu = add(accu, x1);
            _e1 = $$enum(r1, e1$1);
            continue ;
          }
          if (c > 0) {
            _accu = add(accu, x2);
            _e2 = $$enum(r2, e2$1);
            continue ;
          }
          _accu = add(accu, x1);
          _e2 = $$enum(r2, e2$1);
          _e1 = $$enum(r1, e1$1);
          continue ;
        }
        x = x1;
        r = r1;
        e = e1$1;
      } else {
        if (!e2) {
          return accu;
        }
        x = e2._0;
        r = e2._1;
        e = e2._2;
      }
      _accu = add(accu, x);
      _e2 = $$enum(r, e);
      _e1 = /* End */0;
      continue ;
    };
  };
  var inter = function (s1, s2) {
    var _e1 = $$enum(s1, /* End */0);
    var _e2 = $$enum(s2, /* End */0);
    var _accu = /* Empty */0;
    while(true) {
      var accu = _accu;
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        return accu;
      }
      if (!e2) {
        return accu;
      }
      var e2$1 = e2._2;
      var r2 = e2._1;
      var e1$1 = e1._2;
      var r1 = e1._1;
      var x1 = e1._0;
      var c = Curry._2(funarg.compare, x1, e2._0);
      if (c < 0) {
        _e1 = $$enum(r1, e1$1);
        continue ;
      }
      if (c > 0) {
        _e2 = $$enum(r2, e2$1);
        continue ;
      }
      _accu = add(accu, x1);
      _e2 = $$enum(r2, e2$1);
      _e1 = $$enum(r1, e1$1);
      continue ;
    };
  };
  var diff = function (s1, s2) {
    var _e1 = $$enum(s1, /* End */0);
    var _e2 = $$enum(s2, /* End */0);
    var _accu = /* Empty */0;
    while(true) {
      var accu = _accu;
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        return accu;
      }
      var e = e1._2;
      var r = e1._1;
      var x = e1._0;
      if (e2) {
        var e2$1 = e2._2;
        var r2 = e2._1;
        var c = Curry._2(funarg.compare, x, e2._0);
        if (c < 0) {
          _accu = add(accu, x);
          _e1 = $$enum(r, e);
          continue ;
        }
        if (c > 0) {
          _e2 = $$enum(r2, e2$1);
          continue ;
        }
        _e2 = $$enum(r2, e2$1);
        _e1 = $$enum(r, e);
        continue ;
      }
      _accu = add(accu, x);
      _e2 = /* End */0;
      _e1 = $$enum(r, e);
      continue ;
    };
  };
  var compare = function (s1, s2) {
    var _e1 = $$enum(s1, /* End */0);
    var _e2 = $$enum(s2, /* End */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        if (e2) {
          return -1;
        } else {
          return 0;
        }
      }
      if (!e2) {
        return 1;
      }
      var c = Curry._2(funarg.compare, e1._0, e2._0);
      if (c !== 0) {
        return c;
      }
      _e2 = $$enum(e2._1, e2._2);
      _e1 = $$enum(e1._1, e1._2);
      continue ;
    };
  };
  var equal = function (s1, s2) {
    return compare(s1, s2) === 0;
  };
  var subset = function (_s1, _s2) {
    while(true) {
      var s2 = _s2;
      var s1 = _s1;
      if (typeof s1 === "number") {
        return true;
      }
      if (typeof s2 === "number") {
        return false;
      }
      var r1 = s1._2;
      var x1 = s1._1;
      var l1 = s1._0;
      var l2 = s2._0;
      var r2 = s2._2;
      var c = Curry._2(funarg.compare, x1, s2._1);
      if (c === 0) {
        if (!subset(l1, l2)) {
          return false;
        }
        _s2 = r2;
        _s1 = r1;
        continue ;
      }
      if (c < 0) {
        if (!subset({
                TAG: /* Black */0,
                _0: l1,
                _1: x1,
                _2: /* Empty */0
              }, l2)) {
          return false;
        }
        _s1 = r1;
        continue ;
      }
      if (!subset({
              TAG: /* Black */0,
              _0: /* Empty */0,
              _1: x1,
              _2: r1
            }, r2)) {
        return false;
      }
      _s1 = l1;
      continue ;
    };
  };
  var iter = function (_s, f) {
    while(true) {
      var s = _s;
      if (typeof s === "number") {
        return ;
      }
      iter(s._0, f);
      Curry._1(f, s._1);
      _s = s._2;
      continue ;
    };
  };
  var fold = function (_s, f, _accu) {
    while(true) {
      var accu = _accu;
      var s = _s;
      if (typeof s === "number") {
        return accu;
      }
      _accu = Curry._2(f, s._1, fold(s._0, f, accu));
      _s = s._2;
      continue ;
    };
  };
  var forAll = function (_s, p) {
    while(true) {
      var s = _s;
      if (typeof s === "number") {
        return true;
      }
      if (!Curry._1(p, s._1)) {
        return false;
      }
      if (!forAll(s._0, p)) {
        return false;
      }
      _s = s._2;
      continue ;
    };
  };
  var exists = function (_s, p) {
    while(true) {
      var s = _s;
      if (typeof s === "number") {
        return false;
      }
      if (Curry._1(p, s._1)) {
        return true;
      }
      if (exists(s._0, p)) {
        return true;
      }
      _s = s._2;
      continue ;
    };
  };
  var filter = function (s, p) {
    var filterAux = function (_accu, _s) {
      while(true) {
        var s = _s;
        var accu = _accu;
        if (typeof s === "number") {
          return accu;
        }
        var x = s._1;
        _s = s._2;
        _accu = filterAux(Curry._1(p, x) ? add(accu, x) : accu, s._0);
        continue ;
      };
    };
    return filterAux(/* Empty */0, s);
  };
  var partition = function (s, p) {
    var partitionAux = function (_accu, _s) {
      while(true) {
        var s = _s;
        var accu = _accu;
        var f = accu[1];
        var t = accu[0];
        if (typeof s === "number") {
          return accu;
        }
        var x = s._1;
        _s = s._2;
        _accu = partitionAux(Curry._1(p, x) ? [
                add(t, x),
                f
              ] : [
                t,
                add(f, x)
              ], s._0);
        continue ;
      };
    };
    return partitionAux([
                /* Empty */0,
                /* Empty */0
              ], s);
  };
  var cardinal = function (s) {
    if (typeof s === "number") {
      return 0;
    } else {
      return (1 + cardinal(s._0) | 0) + cardinal(s._2) | 0;
    }
  };
  var elementsAux = function (_s, _accu) {
    while(true) {
      var accu = _accu;
      var s = _s;
      if (typeof s === "number") {
        return accu;
      }
      _accu = {
        hd: s._1,
        tl: elementsAux(s._2, accu)
      };
      _s = s._0;
      continue ;
    };
  };
  var elements = function (s) {
    return elementsAux(s, /* [] */0);
  };
  var minElt = function (_s) {
    while(true) {
      var s = _s;
      if (typeof s === "number") {
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }
      if (s.TAG === /* Black */0) {
        var l = s._0;
        if (typeof l === "number") {
          return s._1;
        }
        _s = l;
        continue ;
      }
      var l$1 = s._0;
      if (typeof l$1 === "number") {
        return s._1;
      }
      _s = l$1;
      continue ;
    };
  };
  var maxElt = function (_s) {
    while(true) {
      var s = _s;
      if (typeof s === "number") {
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }
      if (s.TAG === /* Black */0) {
        var r = s._2;
        if (typeof r === "number") {
          return s._1;
        }
        _s = r;
        continue ;
      }
      var r$1 = s._2;
      if (typeof r$1 === "number") {
        return s._1;
      }
      _s = r$1;
      continue ;
    };
  };
  var choose = function (s) {
    if (typeof s === "number") {
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }
    return s._1;
  };
  var split = function (s, x) {
    var splitAux = function (y, param) {
      var r = param[2];
      var b = param[1];
      var l = param[0];
      var c = Curry._2(funarg.compare, x, y);
      if (c < 0) {
        return [
                l,
                b,
                add(r, x)
              ];
      } else if (c > 0) {
        return [
                add(l, x),
                b,
                r
              ];
      } else {
        return [
                l,
                true,
                r
              ];
      }
    };
    return fold(s, splitAux, [
                /* Empty */0,
                false,
                /* Empty */0
              ]);
  };
  return {
          empty: /* Empty */0,
          isEmpty: isEmpty,
          mem: mem,
          add: add,
          singleton: singleton,
          remove: remove,
          union: union,
          inter: inter,
          diff: diff,
          compare: compare,
          equal: equal,
          subset: subset,
          iter: iter,
          fold: fold,
          forAll: forAll,
          exists: exists,
          filter: filter,
          partition: partition,
          cardinal: cardinal,
          elements: elements,
          minElt: minElt,
          maxElt: maxElt,
          choose: choose,
          split: split
        };
}

export {
  Make ,
  
}
/* No side effect */
